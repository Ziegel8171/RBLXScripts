--!strict
-- NebulaUI â€” a lightweight Roblox GUI library
-- Single-file drop-in. Paste into a LocalScript (or loadstring) and call NebulaUI.new("Your UI Title").
-- API (quick):
--   local ui = NebulaUI.new("My Hub")
--   local tab = ui:AddTab("Main")
--   local sec = tab:AddSection("Actions")
--   sec:AddButton("Do thing", function() print("clicked") end)
--   sec:AddToggle("God Mode", false, function(on) print("toggle:", on) end)
--   sec:AddSlider("Speed", 16, 200, 50, function(v) print(v) end)
--   sec:AddTextbox("Chat", "say hi", function(text) print(text) end)
--   sec:AddDropdown("Team", {"Blue","Red","Green"}, "Blue", function(val) print(val) end)
--   ui:BindToggle(Enum.KeyCode.RightShift) -- show/hide
--   ui:Mount()

-- Services
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

-- Utility
local function tween(obj, info, props)
	local t = TweenService:Create(obj, info, props)
	t:Play()
	return t
end

local function mk(className, props, children)
	local inst = Instance.new(className)
	for k, v in pairs(props or {}) do
		inst[k] = v
	end
	for _, child in ipairs(children or {}) do
		child.Parent = inst
	end
	return inst
end

local function mkCorner(radius)
	return mk("UICorner", { CornerRadius = UDim.new(0, radius) })
end

local function mkStroke(thickness, color, transparency)
	return mk("UIStroke", { Thickness = thickness, Color = color, Transparency = transparency or 0 })
end

local function mkPadding(p)
	return mk("UIPadding", { PaddingTop = UDim.new(0,p), PaddingBottom = UDim.new(0,p), PaddingLeft = UDim.new(0,p), PaddingRight = UDim.new(0,p) })
end

local ThemeDefaults = {
	bg = Color3.fromRGB(15, 17, 22),
	surface = Color3.fromRGB(24, 27, 34),
	surface2 = Color3.fromRGB(30, 33, 42),
	text = Color3.fromRGB(235, 240, 255),
	subtext = Color3.fromRGB(150, 158, 175),
	accent = Color3.fromRGB(88, 158, 255),
	success = Color3.fromRGB(6, 196, 108),
	warning = Color3.fromRGB(255, 170, 68),
	muted = Color3.fromRGB(54, 60, 78),
	radius = 10
}

-- Class tables
local SectionMT = {}
SectionMT.__index = SectionMT

local TabMT = {}
TabMT.__index = TabMT

local UIMT = {}
UIMT.__index = UIMT

-- Slider drag logic helper
local function attachSlider(sliderFrame, fillFrame, knob, minV, maxV, startV, onChanged)
	local value = math.clamp(startV, minV, maxV)
	local function setVisual(v)
		local pct = (v - minV) / (maxV - minV)
		fillFrame.Size = UDim2.new(pct, 0, 1, 0)
		knob.Position = UDim2.new(pct, -8, 0.5, -8)
	end
	setVisual(value)

	local dragging = false
	knob.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			dragging = true
		end
	end)
	knob.InputEnded:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			dragging = false
		end
	end)
	UserInputService.InputChanged:Connect(function(input)
		if not dragging then return end
		if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
			local absPos = sliderFrame.AbsolutePosition.X
			local absSize = sliderFrame.AbsoluteSize.X
			local rel = math.clamp((input.Position.X - absPos) / math.max(1, absSize), 0, 1)
			value = math.floor(minV + rel * (maxV - minV) + 0.5)
			setVisual(value)
			if onChanged then onChanged(value) end
		end
	end)
	return function() return value end
end

-- Dropdown helper
local function buildDropdown(theme, parent, width, labelText, options, default, onChanged)
	local row = mk("Frame", { Name = labelText.."Row", BackgroundTransparency = 1, Size = UDim2.new(1,0,0,42) })
	row.Parent = parent

	local bg = mk("Frame", { BackgroundColor3 = theme.surface, Size = UDim2.new(1,0,1,0) }, {
		mkCorner(theme.radius), mkStroke(1, theme.muted, 0.25), mkPadding(10)
	})
	bg.Parent = row

	local label = mk("TextLabel", {
		BackgroundTransparency = 1,
		Text = labelText,
		Font = Enum.Font.GothamBold,
		TextSize = 14,
		TextColor3 = theme.text,
		Size = UDim2.new(0.45,0,1,0),
		TextXAlignment = Enum.TextXAlignment.Left
	})
	label.Parent = bg

	local button = mk("TextButton", {
		BackgroundColor3 = theme.surface2,
		AutoButtonColor = false,
		Text = tostring(default or "Select"),
		Font = Enum.Font.Gotham,
		TextSize = 14,
		TextColor3 = theme.text,
		Size = UDim2.new(0.5,0,1,-4),
		Position = UDim2.new(0.5,0,0,2)
	}, { mkCorner(theme.radius-2) })
	button.Parent = bg

	local list = mk("Frame", { Visible = false, BackgroundColor3 = theme.surface2, Size = UDim2.new(1,-20,0, math.min(6,#options)*26 ), Position = UDim2.new(0,10,1,6) }, {
		mkCorner(theme.radius-2), mkStroke(1, theme.muted, 0.25)
	})
	list.Parent = bg

	local scroller = mk("ScrollingFrame", { Active = true, CanvasSize = UDim2.new(0,0,0,#options*26), BackgroundTransparency = 1, BorderSizePixel = 0, Size = UDim2.new(1,0,1,0), ScrollBarThickness = 4 })
	scroller.Parent = list
	mk("UIListLayout", { Padding = UDim.new(0,4), FillDirection = Enum.FillDirection.Vertical, SortOrder = Enum.SortOrder.LayoutOrder }).Parent = scroller

	local current = default
	for _,opt in ipairs(options) do
		local item = mk("TextButton", { Text = tostring(opt), AutoButtonColor = false, BackgroundColor3 = theme.surface, TextColor3 = theme.text, Font = Enum.Font.Gotham, TextSize = 14, Size = UDim2.new(1,-8,0,24) }, { mkCorner(theme.radius-4) })
		item.Parent = scroller
		item.MouseEnter:Connect(function() tween(item, TweenInfo.new(0.12), {BackgroundColor3 = theme.surface2}) end)
		item.MouseLeave:Connect(function() tween(item, TweenInfo.new(0.12), {BackgroundColor3 = theme.surface}) end)
		item.MouseButton1Click:Connect(function()
			current = opt
			button.Text = tostring(opt)
			list.Visible = false
			if onChanged then onChanged(opt) end
		end)
	end

	button.MouseButton1Click:Connect(function()
		list.Visible = not list.Visible
	end)

	return {
		Get = function() return current end,
		Set = function(v) current = v; button.Text = tostring(v) end
	}
end

-- Section methods
function SectionMT:AddButton(text, callback)
	local theme = self._theme
	local row = mk("Frame", { BackgroundTransparency = 1, Size = UDim2.new(1,0,0,40) })
	row.Parent = self._container

	local btn = mk("TextButton", { Text = text, BackgroundColor3 = theme.accent, TextColor3 = Color3.new(1,1,1), Font = Enum.Font.GothamBold, TextSize = 14, AutoButtonColor = false, Size = UDim2.new(1,0,1,0) }, { mkCorner(theme.radius), mkPadding(10) })
	btn.Parent = row
	btn.MouseEnter:Connect(function() tween(btn, TweenInfo.new(0.12), { BackgroundColor3 = theme.success }) end)
	btn.MouseLeave:Connect(function() tween(btn, TweenInfo.new(0.18), { BackgroundColor3 = theme.accent }) end)
	btn.MouseButton1Click:Connect(function() if callback then callback() end end)
	return btn
end

function SectionMT:AddToggle(text, default, callback)
	local theme = self._theme
	local row = mk("Frame", { BackgroundTransparency = 1, Size = UDim2.new(1,0,0,42) })
	row.Parent = self._container

	local bg = mk("Frame", { BackgroundColor3 = theme.surface, Size = UDim2.new(1,0,1,0) }, { mkCorner(theme.radius), mkStroke(1, theme.muted, 0.25), mkPadding(10) })
	bg.Parent = row

	local label = mk("TextLabel", { BackgroundTransparency = 1, Text = text, Font = Enum.Font.GothamBold, TextSize = 14, TextColor3 = theme.text, Size = UDim2.new(0.7,0,1,0), TextXAlignment = Enum.TextXAlignment.Left })
	label.Parent = bg

	local knob = mk("TextButton", { Text = default and "ON" or "OFF", AutoButtonColor = false, Font = Enum.Font.GothamBold, TextSize = 12, TextColor3 = Color3.new(1,1,1), BackgroundColor3 = default and theme.success or theme.muted, Size = UDim2.new(0,64,0,24), Position = UDim2.new(1,-74,0.5,-12) }, { mkCorner(12) })
	knob.Parent = bg

	local state = default or false
	local function setState(v)
		state = v
		knob.Text = v and "ON" or "OFF"
		knob.BackgroundColor3 = v and theme.success or theme.muted
	end
	setState(state)

	knob.MouseButton1Click:Connect(function()
		setState(not state)
		if callback then callback(state) end
	end)

	return { Get = function() return state end, Set = setState }
end

function SectionMT:AddSlider(text, minV, maxV, defaultV, callback)
	local theme = self._theme
	local row = mk("Frame", { BackgroundTransparency = 1, Size = UDim2.new(1,0,0,56) })
	row.Parent = self._container

	local label = mk("TextLabel", { BackgroundTransparency = 1, Text = string.format("%s (%d-%d)", text, minV, maxV), Font = Enum.Font.GothamBold, TextSize = 14, TextColor3 = theme.text, Size = UDim2.new(1,0,0,16), TextXAlignment = Enum.TextXAlignment.Left })
	label.Parent = row

	local track = mk("Frame", { BackgroundColor3 = theme.surface, Size = UDim2.new(1,0,0,26), Position = UDim2.new(0,0,0,24) }, { mkCorner(theme.radius), mkStroke(1, theme.muted, 0.25), mkPadding(6) })
	track.Parent = row

	local fill = mk("Frame", { BackgroundColor3 = theme.accent, Size = UDim2.new(0.5,0,1,0) }, { mkCorner(theme.radius) })
	fill.Parent = track

	local knob = mk("Frame", { BackgroundColor3 = theme.accent, Size = UDim2.new(0,16,0,16), AnchorPoint = Vector2.new(0,0), Position = UDim2.new(0.5,-8,0.5,-8) }, { mkCorner(8) })
	knob.Parent = track

	local valueLabel = mk("TextLabel", { BackgroundTransparency = 1, Text = tostring(defaultV), Font = Enum.Font.Gotham, TextSize = 12, TextColor3 = theme.subtext, Size = UDim2.new(0,60,0,16), Position = UDim2.new(1,-60,0,0), TextXAlignment = Enum.TextXAlignment.Right })
	valueLabel.Parent = row

	local getVal = attachSlider(track, fill, knob, minV, maxV, defaultV, function(v)
		valueLabel.Text = tostring(v)
		if callback then callback(v) end
	end)
	return { Get = getVal, Set = function(v) if callback then callback(v) end end }
end

function SectionMT:AddTextbox(text, placeholder, callback)
	local theme = self._theme
	local row = mk("Frame", { BackgroundTransparency = 1, Size = UDim2.new(1,0,0,42) })
	row.Parent = self._container

	local bg = mk("Frame", { BackgroundColor3 = theme.surface, Size = UDim2.new(1,0,1,0) }, { mkCorner(theme.radius), mkStroke(1, theme.muted, 0.25), mkPadding(10) })
	bg.Parent = row

	local label = mk("TextLabel", { BackgroundTransparency = 1, Text = text, Font = Enum.Font.GothamBold, TextSize = 14, TextColor3 = theme.text, Size = UDim2.new(0.35,0,1,0), TextXAlignment = Enum.TextXAlignment.Left })
	label.Parent = bg

	local tb = mk("TextBox", { Text = "", PlaceholderText = placeholder or "", ClearTextOnFocus = false, BackgroundColor3 = ThemeDefaults.bg, TextColor3 = theme.text, Font = Enum.Font.Gotham, TextSize = 14, Size = UDim2.new(0.6,0,1, -4), Position = UDim2.new(0.4,0,0,2) }, { mkCorner(theme.radius-2) })
	tb.Parent = bg
	tb.FocusLost:Connect(function(enter)
		if callback then callback(tb.Text) end
	end)

	return { Get = function() return tb.Text end, Set = function(v) tb.Text = tostring(v or "") end }
end

function SectionMT:AddDropdown(text, options, default, callback)
	local theme = self._theme
	local dd = buildDropdown(theme, self._container, self._container.AbsoluteSize.X, text, options, default, callback)
	return dd
end

function TabMT:AddSection(name)
	local theme = self._theme
	local section = mk("Frame", { Name = name, BackgroundTransparency = 1, Size = UDim2.new(1, -4, 0, 0), AutomaticSize = Enum.AutomaticSize.Y })
	section.Parent = self._body

	local title = mk("TextLabel", { BackgroundTransparency = 1, Text = name, Font = Enum.Font.GothamBold, TextSize = 16, TextColor3 = theme.subtext, Size = UDim2.new(1,0,0,18), TextXAlignment = Enum.TextXAlignment.Left })
	title.Parent = section

	local container = mk("Frame", { BackgroundTransparency = 1, Size = UDim2.new(1,0,0,0), Position = UDim2.new(0,0,0,22), AutomaticSize = Enum.AutomaticSize.Y })
	container.Parent = section

	mk("UIListLayout", { Padding = UDim.new(0,8), FillDirection = Enum.FillDirection.Vertical, SortOrder = Enum.SortOrder.LayoutOrder }).Parent = container

	local s = setmetatable({ _theme = theme, _container = container }, SectionMT)
	return s
end

function UIMT:AddTab(name)
	local theme = self._theme
	local btn = mk("TextButton", { Text = name, AutoButtonColor = false, BackgroundColor3 = theme.surface, TextColor3 = theme.text, Font = Enum.Font.GothamBold, TextSize = 14, Size = UDim2.new(1,0,0,36) }, { mkCorner(theme.radius), mkStroke(1, theme.muted, 0.25) })
	btn.Parent = self._tabBar

	local body = mk("ScrollingFrame", { Visible = false, Active = true, BackgroundTransparency = 1, BorderSizePixel = 0, Size = UDim2.new(1,0,1,0), CanvasSize = UDim2.new(0,0,0,0), ScrollBarThickness = 4 })
	body.Parent = self._content

	mk("UIListLayout", { Padding = UDim.new(0,10), FillDirection = Enum.FillDirection.Vertical, SortOrder = Enum.SortOrder.LayoutOrder }).Parent = body

	local tabObj = setmetatable({ _theme = theme, _button = btn, _body = body }, TabMT)

	local function select()
		for _, t in ipairs(self._tabs) do
			t._body.Visible = false
			TweenService:Create(t._button, TweenInfo.new(0.15), { BackgroundColor3 = theme.surface }):Play()
		end
		body.Visible = true
		TweenService:Create(btn, TweenInfo.new(0.15), { BackgroundColor3 = theme.surface2 }):Play()
	end
	btn.MouseButton1Click:Connect(select)

	table.insert(self._tabs, tabObj)
	if #self._tabs == 1 then select() end
	return tabObj
end

function UIMT:SetTheme(partial)
	for k,v in pairs(partial or {}) do
		self._theme[k] = v
	end
end

function UIMT:BindToggle(keyCode)
	self._toggleKey = keyCode
end

function UIMT:Mount()
	self._screen.Parent = PlayerGui
end

-- Constructor
local NebulaUI = {}
function NebulaUI.new(title)
	local theme = table.clone(ThemeDefaults)

	local screen = mk("ScreenGui", { Name = "NebulaUI", ResetOnSpawn = false, IgnoreGuiInset = true })

	local root = mk("Frame", { BackgroundColor3 = theme.bg, Size = UDim2.new(0, 560, 0, 420), Position = UDim2.new(0.5,-280, 0.5,-210), Active = true }, {
		mkCorner(theme.radius+2), mkStroke(1.2, theme.surface2, 0.2)
	})
	root.Parent = screen

	-- Dragging
	local dragging = false
	local dragStart, startPos
	root.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true
			dragStart = input.Position
			startPos = root.Position
		end
	end)
	root.InputChanged:Connect(function(input)
		if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
			local delta = input.Position - dragStart
			root.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
		end
	end)
	UserInputService.InputEnded:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then dragging = false end
	end)

	local header = mk("Frame", { BackgroundColor3 = theme.surface2, Size = UDim2.new(1,0,0,44) }, { mkCorner(theme.radius), mkPadding(10) })
	header.Parent = root

	local titleLbl = mk("TextLabel", { BackgroundTransparency = 1, Text = tostring(title or "Nebula UI"), Font = Enum.Font.GothamBold, TextSize = 18, TextColor3 = theme.text, Size = UDim2.new(0.6,0,1,0), TextXAlignment = Enum.TextXAlignment.Left })
	titleLbl.Parent = header

	local hideBtn = mk("TextButton", { Text = "â€”", AutoButtonColor = false, BackgroundColor3 = theme.surface, TextColor3 = theme.text, Font = Enum.Font.GothamBold, TextSize = 16, Size = UDim2.new(0,36,0,24), Position = UDim2.new(1,-46,0.5,-12) }, { mkCorner(6) })
	hideBtn.Parent = header
	hideBtn.MouseButton1Click:Connect(function()
		root.Visible = not root.Visible
	end)

	local body = mk("Frame", { BackgroundTransparency = 1, Size = UDim2.new(1,-20,1,-64), Position = UDim2.new(0,10,0,54) })
	body.Parent = root

	local sidebar = mk("ScrollingFrame", { Active = true, BackgroundTransparency = 1, BorderSizePixel = 0, Size = UDim2.new(0,150,1,0), ScrollBarThickness = 4 })
	sidebar.Parent = body
	mk("UIListLayout", { Padding = UDim.new(0,8), FillDirection = Enum.FillDirection.Vertical, SortOrder = Enum.SortOrder.LayoutOrder }).Parent = sidebar

	local content = mk("Frame", { BackgroundTransparency = 1, Size = UDim2.new(1,-170,1,0), Position = UDim2.new(0,160,0,0) })
	content.Parent = body

	local tabs = {}

	-- toggle key support
	UserInputService.InputBegan:Connect(function(input, processed)
		if processed then return end
		if self and self._toggleKey and input.KeyCode == self._toggleKey then
			root.Visible = not root.Visible
		end
	end)

	local uiObj = setmetatable({
		_theme = theme,
		_screen = screen,
		_root = root,
		_header = header,
		_tabBar = sidebar,
		_content = content,
		_tabs = tabs,
		_toggleKey = nil,
	}, UIMT)

	return uiObj
end

return NebulaUI
